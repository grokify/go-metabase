/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the DatasetQueryJsonQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetQueryJsonQuery{}

// DatasetQueryJsonQuery struct for DatasetQueryJsonQuery
type DatasetQueryJsonQuery struct {
	Database    *int64                   `json:"database,omitempty"`
	Type        *string                  `json:"type,omitempty"`
	Native      *DatasetQueryNative      `json:"native,omitempty"`
	Query       *DatasetQueryDsl         `json:"query,omitempty"`
	Constraints *DatasetQueryConstraints `json:"constraints,omitempty"`
}

// NewDatasetQueryJsonQuery instantiates a new DatasetQueryJsonQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetQueryJsonQuery() *DatasetQueryJsonQuery {
	this := DatasetQueryJsonQuery{}
	return &this
}

// NewDatasetQueryJsonQueryWithDefaults instantiates a new DatasetQueryJsonQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetQueryJsonQueryWithDefaults() *DatasetQueryJsonQuery {
	this := DatasetQueryJsonQuery{}
	return &this
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *DatasetQueryJsonQuery) GetDatabase() int64 {
	if o == nil || IsNil(o.Database) {
		var ret int64
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryJsonQuery) GetDatabaseOk() (*int64, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *DatasetQueryJsonQuery) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given int64 and assigns it to the Database field.
func (o *DatasetQueryJsonQuery) SetDatabase(v int64) {
	o.Database = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatasetQueryJsonQuery) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryJsonQuery) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatasetQueryJsonQuery) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DatasetQueryJsonQuery) SetType(v string) {
	o.Type = &v
}

// GetNative returns the Native field value if set, zero value otherwise.
func (o *DatasetQueryJsonQuery) GetNative() DatasetQueryNative {
	if o == nil || IsNil(o.Native) {
		var ret DatasetQueryNative
		return ret
	}
	return *o.Native
}

// GetNativeOk returns a tuple with the Native field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryJsonQuery) GetNativeOk() (*DatasetQueryNative, bool) {
	if o == nil || IsNil(o.Native) {
		return nil, false
	}
	return o.Native, true
}

// HasNative returns a boolean if a field has been set.
func (o *DatasetQueryJsonQuery) HasNative() bool {
	if o != nil && !IsNil(o.Native) {
		return true
	}

	return false
}

// SetNative gets a reference to the given DatasetQueryNative and assigns it to the Native field.
func (o *DatasetQueryJsonQuery) SetNative(v DatasetQueryNative) {
	o.Native = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DatasetQueryJsonQuery) GetQuery() DatasetQueryDsl {
	if o == nil || IsNil(o.Query) {
		var ret DatasetQueryDsl
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryJsonQuery) GetQueryOk() (*DatasetQueryDsl, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DatasetQueryJsonQuery) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given DatasetQueryDsl and assigns it to the Query field.
func (o *DatasetQueryJsonQuery) SetQuery(v DatasetQueryDsl) {
	o.Query = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *DatasetQueryJsonQuery) GetConstraints() DatasetQueryConstraints {
	if o == nil || IsNil(o.Constraints) {
		var ret DatasetQueryConstraints
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryJsonQuery) GetConstraintsOk() (*DatasetQueryConstraints, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *DatasetQueryJsonQuery) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given DatasetQueryConstraints and assigns it to the Constraints field.
func (o *DatasetQueryJsonQuery) SetConstraints(v DatasetQueryConstraints) {
	o.Constraints = &v
}

func (o DatasetQueryJsonQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetQueryJsonQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Native) {
		toSerialize["native"] = o.Native
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	return toSerialize, nil
}

type NullableDatasetQueryJsonQuery struct {
	value *DatasetQueryJsonQuery
	isSet bool
}

func (v NullableDatasetQueryJsonQuery) Get() *DatasetQueryJsonQuery {
	return v.value
}

func (v *NullableDatasetQueryJsonQuery) Set(val *DatasetQueryJsonQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetQueryJsonQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetQueryJsonQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetQueryJsonQuery(val *DatasetQueryJsonQuery) *NullableDatasetQueryJsonQuery {
	return &NullableDatasetQueryJsonQuery{value: val, isSet: true}
}

func (v NullableDatasetQueryJsonQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetQueryJsonQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
