/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
	"time"
)

// checks if the DatasetQueryResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetQueryResults{}

// DatasetQueryResults struct for DatasetQueryResults
type DatasetQueryResults struct {
	StartedAt *time.Time             `json:"started_at,omitempty"`
	JsonQuery *DatasetQueryJsonQuery `json:"json_query,omitempty"`
	// type unknown
	AverageExecutionTime *string                  `json:"average_execution_time,omitempty"`
	Status               *string                  `json:"status,omitempty"`
	Context              *string                  `json:"context,omitempty"`
	RowCount             *int64                   `json:"row_count,omitempty"`
	RunningTime          *int64                   `json:"running_time,omitempty"`
	Data                 *DatasetQueryResultsData `json:"data,omitempty"`
}

// NewDatasetQueryResults instantiates a new DatasetQueryResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetQueryResults() *DatasetQueryResults {
	this := DatasetQueryResults{}
	return &this
}

// NewDatasetQueryResultsWithDefaults instantiates a new DatasetQueryResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetQueryResultsWithDefaults() *DatasetQueryResults {
	this := DatasetQueryResults{}
	return &this
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *DatasetQueryResults) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetJsonQuery returns the JsonQuery field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetJsonQuery() DatasetQueryJsonQuery {
	if o == nil || IsNil(o.JsonQuery) {
		var ret DatasetQueryJsonQuery
		return ret
	}
	return *o.JsonQuery
}

// GetJsonQueryOk returns a tuple with the JsonQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetJsonQueryOk() (*DatasetQueryJsonQuery, bool) {
	if o == nil || IsNil(o.JsonQuery) {
		return nil, false
	}
	return o.JsonQuery, true
}

// HasJsonQuery returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasJsonQuery() bool {
	if o != nil && !IsNil(o.JsonQuery) {
		return true
	}

	return false
}

// SetJsonQuery gets a reference to the given DatasetQueryJsonQuery and assigns it to the JsonQuery field.
func (o *DatasetQueryResults) SetJsonQuery(v DatasetQueryJsonQuery) {
	o.JsonQuery = &v
}

// GetAverageExecutionTime returns the AverageExecutionTime field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetAverageExecutionTime() string {
	if o == nil || IsNil(o.AverageExecutionTime) {
		var ret string
		return ret
	}
	return *o.AverageExecutionTime
}

// GetAverageExecutionTimeOk returns a tuple with the AverageExecutionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetAverageExecutionTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AverageExecutionTime) {
		return nil, false
	}
	return o.AverageExecutionTime, true
}

// HasAverageExecutionTime returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasAverageExecutionTime() bool {
	if o != nil && !IsNil(o.AverageExecutionTime) {
		return true
	}

	return false
}

// SetAverageExecutionTime gets a reference to the given string and assigns it to the AverageExecutionTime field.
func (o *DatasetQueryResults) SetAverageExecutionTime(v string) {
	o.AverageExecutionTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DatasetQueryResults) SetStatus(v string) {
	o.Status = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *DatasetQueryResults) SetContext(v string) {
	o.Context = &v
}

// GetRowCount returns the RowCount field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetRowCount() int64 {
	if o == nil || IsNil(o.RowCount) {
		var ret int64
		return ret
	}
	return *o.RowCount
}

// GetRowCountOk returns a tuple with the RowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetRowCountOk() (*int64, bool) {
	if o == nil || IsNil(o.RowCount) {
		return nil, false
	}
	return o.RowCount, true
}

// HasRowCount returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasRowCount() bool {
	if o != nil && !IsNil(o.RowCount) {
		return true
	}

	return false
}

// SetRowCount gets a reference to the given int64 and assigns it to the RowCount field.
func (o *DatasetQueryResults) SetRowCount(v int64) {
	o.RowCount = &v
}

// GetRunningTime returns the RunningTime field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetRunningTime() int64 {
	if o == nil || IsNil(o.RunningTime) {
		var ret int64
		return ret
	}
	return *o.RunningTime
}

// GetRunningTimeOk returns a tuple with the RunningTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetRunningTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.RunningTime) {
		return nil, false
	}
	return o.RunningTime, true
}

// HasRunningTime returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasRunningTime() bool {
	if o != nil && !IsNil(o.RunningTime) {
		return true
	}

	return false
}

// SetRunningTime gets a reference to the given int64 and assigns it to the RunningTime field.
func (o *DatasetQueryResults) SetRunningTime(v int64) {
	o.RunningTime = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DatasetQueryResults) GetData() DatasetQueryResultsData {
	if o == nil || IsNil(o.Data) {
		var ret DatasetQueryResultsData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResults) GetDataOk() (*DatasetQueryResultsData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DatasetQueryResults) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given DatasetQueryResultsData and assigns it to the Data field.
func (o *DatasetQueryResults) SetData(v DatasetQueryResultsData) {
	o.Data = &v
}

func (o DatasetQueryResults) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetQueryResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.JsonQuery) {
		toSerialize["json_query"] = o.JsonQuery
	}
	if !IsNil(o.AverageExecutionTime) {
		toSerialize["average_execution_time"] = o.AverageExecutionTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.RowCount) {
		toSerialize["row_count"] = o.RowCount
	}
	if !IsNil(o.RunningTime) {
		toSerialize["running_time"] = o.RunningTime
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableDatasetQueryResults struct {
	value *DatasetQueryResults
	isSet bool
}

func (v NullableDatasetQueryResults) Get() *DatasetQueryResults {
	return v.value
}

func (v *NullableDatasetQueryResults) Set(val *DatasetQueryResults) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetQueryResults) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetQueryResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetQueryResults(val *DatasetQueryResults) *NullableDatasetQueryResults {
	return &NullableDatasetQueryResults{value: val, isSet: true}
}

func (v NullableDatasetQueryResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetQueryResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
