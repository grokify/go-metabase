/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the DatasetQueryResultsMetadataColumn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetQueryResultsMetadataColumn{}

// DatasetQueryResultsMetadataColumn struct for DatasetQueryResultsMetadataColumn
type DatasetQueryResultsMetadataColumn struct {
	BaseType    *string `json:"base_type,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Name        *string `json:"name,omitempty"`
	SpecialType *string `json:"special_type,omitempty"`
}

// NewDatasetQueryResultsMetadataColumn instantiates a new DatasetQueryResultsMetadataColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetQueryResultsMetadataColumn() *DatasetQueryResultsMetadataColumn {
	this := DatasetQueryResultsMetadataColumn{}
	return &this
}

// NewDatasetQueryResultsMetadataColumnWithDefaults instantiates a new DatasetQueryResultsMetadataColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetQueryResultsMetadataColumnWithDefaults() *DatasetQueryResultsMetadataColumn {
	this := DatasetQueryResultsMetadataColumn{}
	return &this
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *DatasetQueryResultsMetadataColumn) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsMetadataColumn) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *DatasetQueryResultsMetadataColumn) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *DatasetQueryResultsMetadataColumn) SetBaseType(v string) {
	o.BaseType = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DatasetQueryResultsMetadataColumn) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsMetadataColumn) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DatasetQueryResultsMetadataColumn) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DatasetQueryResultsMetadataColumn) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatasetQueryResultsMetadataColumn) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsMetadataColumn) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatasetQueryResultsMetadataColumn) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatasetQueryResultsMetadataColumn) SetName(v string) {
	o.Name = &v
}

// GetSpecialType returns the SpecialType field value if set, zero value otherwise.
func (o *DatasetQueryResultsMetadataColumn) GetSpecialType() string {
	if o == nil || IsNil(o.SpecialType) {
		var ret string
		return ret
	}
	return *o.SpecialType
}

// GetSpecialTypeOk returns a tuple with the SpecialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsMetadataColumn) GetSpecialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SpecialType) {
		return nil, false
	}
	return o.SpecialType, true
}

// HasSpecialType returns a boolean if a field has been set.
func (o *DatasetQueryResultsMetadataColumn) HasSpecialType() bool {
	if o != nil && !IsNil(o.SpecialType) {
		return true
	}

	return false
}

// SetSpecialType gets a reference to the given string and assigns it to the SpecialType field.
func (o *DatasetQueryResultsMetadataColumn) SetSpecialType(v string) {
	o.SpecialType = &v
}

func (o DatasetQueryResultsMetadataColumn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetQueryResultsMetadataColumn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseType) {
		toSerialize["base_type"] = o.BaseType
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SpecialType) {
		toSerialize["special_type"] = o.SpecialType
	}
	return toSerialize, nil
}

type NullableDatasetQueryResultsMetadataColumn struct {
	value *DatasetQueryResultsMetadataColumn
	isSet bool
}

func (v NullableDatasetQueryResultsMetadataColumn) Get() *DatasetQueryResultsMetadataColumn {
	return v.value
}

func (v *NullableDatasetQueryResultsMetadataColumn) Set(val *DatasetQueryResultsMetadataColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetQueryResultsMetadataColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetQueryResultsMetadataColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetQueryResultsMetadataColumn(val *DatasetQueryResultsMetadataColumn) *NullableDatasetQueryResultsMetadataColumn {
	return &NullableDatasetQueryResultsMetadataColumn{value: val, isSet: true}
}

func (v NullableDatasetQueryResultsMetadataColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetQueryResultsMetadataColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
