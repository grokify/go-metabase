/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
	"time"
)

// checks if the DatabaseTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseTable{}

// DatabaseTable struct for DatabaseTable
type DatabaseTable struct {
	Description *string `json:"description,omitempty"`
	// unknown type
	EntityType *string `json:"entity_type,omitempty"`
	Schema     *string `json:"schema,omitempty"`
	// unknown type
	RawTableId           *string `json:"raw_table_id,omitempty"`
	ShowInGettingStarted *bool   `json:"show_in_getting_started,omitempty"`
	Name                 *string `json:"name,omitempty"`
	// unknown type
	Caveats   *string    `json:"caveats,omitempty"`
	Rows      *int64     `json:"rows,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// unknown type
	EntityName *string `json:"entity_name,omitempty"`
	Active     *bool   `json:"active,omitempty"`
	Id         *int64  `json:"id,omitempty"`
	DbId       *int64  `json:"db_id,omitempty"`
	// unknown type
	VisibilityType *string    `json:"visibility_type,omitempty"`
	DisplayName    *string    `json:"display_name,omitempty"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	// unknown type
	PointsOfInterest *string `json:"points_of_interest,omitempty"`
}

// NewDatabaseTable instantiates a new DatabaseTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseTable() *DatabaseTable {
	this := DatabaseTable{}
	return &this
}

// NewDatabaseTableWithDefaults instantiates a new DatabaseTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseTableWithDefaults() *DatabaseTable {
	this := DatabaseTable{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatabaseTable) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatabaseTable) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatabaseTable) SetDescription(v string) {
	o.Description = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *DatabaseTable) GetEntityType() string {
	if o == nil || IsNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *DatabaseTable) HasEntityType() bool {
	if o != nil && !IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *DatabaseTable) SetEntityType(v string) {
	o.EntityType = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *DatabaseTable) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *DatabaseTable) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *DatabaseTable) SetSchema(v string) {
	o.Schema = &v
}

// GetRawTableId returns the RawTableId field value if set, zero value otherwise.
func (o *DatabaseTable) GetRawTableId() string {
	if o == nil || IsNil(o.RawTableId) {
		var ret string
		return ret
	}
	return *o.RawTableId
}

// GetRawTableIdOk returns a tuple with the RawTableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetRawTableIdOk() (*string, bool) {
	if o == nil || IsNil(o.RawTableId) {
		return nil, false
	}
	return o.RawTableId, true
}

// HasRawTableId returns a boolean if a field has been set.
func (o *DatabaseTable) HasRawTableId() bool {
	if o != nil && !IsNil(o.RawTableId) {
		return true
	}

	return false
}

// SetRawTableId gets a reference to the given string and assigns it to the RawTableId field.
func (o *DatabaseTable) SetRawTableId(v string) {
	o.RawTableId = &v
}

// GetShowInGettingStarted returns the ShowInGettingStarted field value if set, zero value otherwise.
func (o *DatabaseTable) GetShowInGettingStarted() bool {
	if o == nil || IsNil(o.ShowInGettingStarted) {
		var ret bool
		return ret
	}
	return *o.ShowInGettingStarted
}

// GetShowInGettingStartedOk returns a tuple with the ShowInGettingStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetShowInGettingStartedOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowInGettingStarted) {
		return nil, false
	}
	return o.ShowInGettingStarted, true
}

// HasShowInGettingStarted returns a boolean if a field has been set.
func (o *DatabaseTable) HasShowInGettingStarted() bool {
	if o != nil && !IsNil(o.ShowInGettingStarted) {
		return true
	}

	return false
}

// SetShowInGettingStarted gets a reference to the given bool and assigns it to the ShowInGettingStarted field.
func (o *DatabaseTable) SetShowInGettingStarted(v bool) {
	o.ShowInGettingStarted = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatabaseTable) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatabaseTable) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatabaseTable) SetName(v string) {
	o.Name = &v
}

// GetCaveats returns the Caveats field value if set, zero value otherwise.
func (o *DatabaseTable) GetCaveats() string {
	if o == nil || IsNil(o.Caveats) {
		var ret string
		return ret
	}
	return *o.Caveats
}

// GetCaveatsOk returns a tuple with the Caveats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetCaveatsOk() (*string, bool) {
	if o == nil || IsNil(o.Caveats) {
		return nil, false
	}
	return o.Caveats, true
}

// HasCaveats returns a boolean if a field has been set.
func (o *DatabaseTable) HasCaveats() bool {
	if o != nil && !IsNil(o.Caveats) {
		return true
	}

	return false
}

// SetCaveats gets a reference to the given string and assigns it to the Caveats field.
func (o *DatabaseTable) SetCaveats(v string) {
	o.Caveats = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *DatabaseTable) GetRows() int64 {
	if o == nil || IsNil(o.Rows) {
		var ret int64
		return ret
	}
	return *o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *DatabaseTable) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given int64 and assigns it to the Rows field.
func (o *DatabaseTable) SetRows(v int64) {
	o.Rows = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DatabaseTable) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DatabaseTable) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DatabaseTable) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *DatabaseTable) GetEntityName() string {
	if o == nil || IsNil(o.EntityName) {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.EntityName) {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *DatabaseTable) HasEntityName() bool {
	if o != nil && !IsNil(o.EntityName) {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *DatabaseTable) SetEntityName(v string) {
	o.EntityName = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *DatabaseTable) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *DatabaseTable) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *DatabaseTable) SetActive(v bool) {
	o.Active = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatabaseTable) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatabaseTable) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DatabaseTable) SetId(v int64) {
	o.Id = &v
}

// GetDbId returns the DbId field value if set, zero value otherwise.
func (o *DatabaseTable) GetDbId() int64 {
	if o == nil || IsNil(o.DbId) {
		var ret int64
		return ret
	}
	return *o.DbId
}

// GetDbIdOk returns a tuple with the DbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetDbIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DbId) {
		return nil, false
	}
	return o.DbId, true
}

// HasDbId returns a boolean if a field has been set.
func (o *DatabaseTable) HasDbId() bool {
	if o != nil && !IsNil(o.DbId) {
		return true
	}

	return false
}

// SetDbId gets a reference to the given int64 and assigns it to the DbId field.
func (o *DatabaseTable) SetDbId(v int64) {
	o.DbId = &v
}

// GetVisibilityType returns the VisibilityType field value if set, zero value otherwise.
func (o *DatabaseTable) GetVisibilityType() string {
	if o == nil || IsNil(o.VisibilityType) {
		var ret string
		return ret
	}
	return *o.VisibilityType
}

// GetVisibilityTypeOk returns a tuple with the VisibilityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetVisibilityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VisibilityType) {
		return nil, false
	}
	return o.VisibilityType, true
}

// HasVisibilityType returns a boolean if a field has been set.
func (o *DatabaseTable) HasVisibilityType() bool {
	if o != nil && !IsNil(o.VisibilityType) {
		return true
	}

	return false
}

// SetVisibilityType gets a reference to the given string and assigns it to the VisibilityType field.
func (o *DatabaseTable) SetVisibilityType(v string) {
	o.VisibilityType = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DatabaseTable) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DatabaseTable) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DatabaseTable) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DatabaseTable) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DatabaseTable) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DatabaseTable) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetPointsOfInterest returns the PointsOfInterest field value if set, zero value otherwise.
func (o *DatabaseTable) GetPointsOfInterest() string {
	if o == nil || IsNil(o.PointsOfInterest) {
		var ret string
		return ret
	}
	return *o.PointsOfInterest
}

// GetPointsOfInterestOk returns a tuple with the PointsOfInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTable) GetPointsOfInterestOk() (*string, bool) {
	if o == nil || IsNil(o.PointsOfInterest) {
		return nil, false
	}
	return o.PointsOfInterest, true
}

// HasPointsOfInterest returns a boolean if a field has been set.
func (o *DatabaseTable) HasPointsOfInterest() bool {
	if o != nil && !IsNil(o.PointsOfInterest) {
		return true
	}

	return false
}

// SetPointsOfInterest gets a reference to the given string and assigns it to the PointsOfInterest field.
func (o *DatabaseTable) SetPointsOfInterest(v string) {
	o.PointsOfInterest = &v
}

func (o DatabaseTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EntityType) {
		toSerialize["entity_type"] = o.EntityType
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.RawTableId) {
		toSerialize["raw_table_id"] = o.RawTableId
	}
	if !IsNil(o.ShowInGettingStarted) {
		toSerialize["show_in_getting_started"] = o.ShowInGettingStarted
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Caveats) {
		toSerialize["caveats"] = o.Caveats
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.EntityName) {
		toSerialize["entity_name"] = o.EntityName
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DbId) {
		toSerialize["db_id"] = o.DbId
	}
	if !IsNil(o.VisibilityType) {
		toSerialize["visibility_type"] = o.VisibilityType
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.PointsOfInterest) {
		toSerialize["points_of_interest"] = o.PointsOfInterest
	}
	return toSerialize, nil
}

type NullableDatabaseTable struct {
	value *DatabaseTable
	isSet bool
}

func (v NullableDatabaseTable) Get() *DatabaseTable {
	return v.value
}

func (v *NullableDatabaseTable) Set(val *DatabaseTable) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseTable) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseTable(val *DatabaseTable) *NullableDatabaseTable {
	return &NullableDatabaseTable{value: val, isSet: true}
}

func (v NullableDatabaseTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
