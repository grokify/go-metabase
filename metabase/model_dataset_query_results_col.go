/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the DatasetQueryResultsCol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetQueryResultsCol{}

// DatasetQueryResultsCol struct for DatasetQueryResultsCol
type DatasetQueryResultsCol struct {
	Description *string `json:"description,omitempty"`
	TableId     *int64  `json:"table_id,omitempty"`
	SchemaName  *string `json:"schema_name,omitempty"`
	SpecialType *string `json:"special_type,omitempty"`
	Name        *string `json:"name,omitempty"`
	Source      *string `json:"source,omitempty"`
	// unknown type
	RemappedFrom *string `json:"remapped_from,omitempty"`
	// can be '{\"target_table_id\":517}'
	ExtraInfo map[string]interface{} `json:"extra_info,omitempty"`
	// unknown type
	FkFieldId *string `json:"fk_field_id,omitempty"`
	// unknown type
	RemappedTo     *string                            `json:"remapped_to,omitempty"`
	Id             *int64                             `json:"id,omitempty"`
	VisibilityType *string                            `json:"visibility_type,omitempty"`
	Target         *DatasetQueryResultsColTarget      `json:"target,omitempty"`
	DisplayName    *string                            `json:"display_name,omitempty"`
	Fingerprint    *DatasetQueryResultsColFingerprint `json:"fingerprint,omitempty"`
	BaseType       *string                            `json:"base_type,omitempty"`
}

// NewDatasetQueryResultsCol instantiates a new DatasetQueryResultsCol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetQueryResultsCol() *DatasetQueryResultsCol {
	this := DatasetQueryResultsCol{}
	return &this
}

// NewDatasetQueryResultsColWithDefaults instantiates a new DatasetQueryResultsCol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetQueryResultsColWithDefaults() *DatasetQueryResultsCol {
	this := DatasetQueryResultsCol{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatasetQueryResultsCol) SetDescription(v string) {
	o.Description = &v
}

// GetTableId returns the TableId field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetTableId() int64 {
	if o == nil || IsNil(o.TableId) {
		var ret int64
		return ret
	}
	return *o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetTableIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TableId) {
		return nil, false
	}
	return o.TableId, true
}

// HasTableId returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasTableId() bool {
	if o != nil && !IsNil(o.TableId) {
		return true
	}

	return false
}

// SetTableId gets a reference to the given int64 and assigns it to the TableId field.
func (o *DatasetQueryResultsCol) SetTableId(v int64) {
	o.TableId = &v
}

// GetSchemaName returns the SchemaName field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetSchemaName() string {
	if o == nil || IsNil(o.SchemaName) {
		var ret string
		return ret
	}
	return *o.SchemaName
}

// GetSchemaNameOk returns a tuple with the SchemaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetSchemaNameOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaName) {
		return nil, false
	}
	return o.SchemaName, true
}

// HasSchemaName returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasSchemaName() bool {
	if o != nil && !IsNil(o.SchemaName) {
		return true
	}

	return false
}

// SetSchemaName gets a reference to the given string and assigns it to the SchemaName field.
func (o *DatasetQueryResultsCol) SetSchemaName(v string) {
	o.SchemaName = &v
}

// GetSpecialType returns the SpecialType field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetSpecialType() string {
	if o == nil || IsNil(o.SpecialType) {
		var ret string
		return ret
	}
	return *o.SpecialType
}

// GetSpecialTypeOk returns a tuple with the SpecialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetSpecialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SpecialType) {
		return nil, false
	}
	return o.SpecialType, true
}

// HasSpecialType returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasSpecialType() bool {
	if o != nil && !IsNil(o.SpecialType) {
		return true
	}

	return false
}

// SetSpecialType gets a reference to the given string and assigns it to the SpecialType field.
func (o *DatasetQueryResultsCol) SetSpecialType(v string) {
	o.SpecialType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatasetQueryResultsCol) SetName(v string) {
	o.Name = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *DatasetQueryResultsCol) SetSource(v string) {
	o.Source = &v
}

// GetRemappedFrom returns the RemappedFrom field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetRemappedFrom() string {
	if o == nil || IsNil(o.RemappedFrom) {
		var ret string
		return ret
	}
	return *o.RemappedFrom
}

// GetRemappedFromOk returns a tuple with the RemappedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetRemappedFromOk() (*string, bool) {
	if o == nil || IsNil(o.RemappedFrom) {
		return nil, false
	}
	return o.RemappedFrom, true
}

// HasRemappedFrom returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasRemappedFrom() bool {
	if o != nil && !IsNil(o.RemappedFrom) {
		return true
	}

	return false
}

// SetRemappedFrom gets a reference to the given string and assigns it to the RemappedFrom field.
func (o *DatasetQueryResultsCol) SetRemappedFrom(v string) {
	o.RemappedFrom = &v
}

// GetExtraInfo returns the ExtraInfo field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetExtraInfo() map[string]interface{} {
	if o == nil || IsNil(o.ExtraInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraInfo
}

// GetExtraInfoOk returns a tuple with the ExtraInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetExtraInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtraInfo) {
		return map[string]interface{}{}, false
	}
	return o.ExtraInfo, true
}

// HasExtraInfo returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasExtraInfo() bool {
	if o != nil && !IsNil(o.ExtraInfo) {
		return true
	}

	return false
}

// SetExtraInfo gets a reference to the given map[string]interface{} and assigns it to the ExtraInfo field.
func (o *DatasetQueryResultsCol) SetExtraInfo(v map[string]interface{}) {
	o.ExtraInfo = v
}

// GetFkFieldId returns the FkFieldId field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetFkFieldId() string {
	if o == nil || IsNil(o.FkFieldId) {
		var ret string
		return ret
	}
	return *o.FkFieldId
}

// GetFkFieldIdOk returns a tuple with the FkFieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetFkFieldIdOk() (*string, bool) {
	if o == nil || IsNil(o.FkFieldId) {
		return nil, false
	}
	return o.FkFieldId, true
}

// HasFkFieldId returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasFkFieldId() bool {
	if o != nil && !IsNil(o.FkFieldId) {
		return true
	}

	return false
}

// SetFkFieldId gets a reference to the given string and assigns it to the FkFieldId field.
func (o *DatasetQueryResultsCol) SetFkFieldId(v string) {
	o.FkFieldId = &v
}

// GetRemappedTo returns the RemappedTo field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetRemappedTo() string {
	if o == nil || IsNil(o.RemappedTo) {
		var ret string
		return ret
	}
	return *o.RemappedTo
}

// GetRemappedToOk returns a tuple with the RemappedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetRemappedToOk() (*string, bool) {
	if o == nil || IsNil(o.RemappedTo) {
		return nil, false
	}
	return o.RemappedTo, true
}

// HasRemappedTo returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasRemappedTo() bool {
	if o != nil && !IsNil(o.RemappedTo) {
		return true
	}

	return false
}

// SetRemappedTo gets a reference to the given string and assigns it to the RemappedTo field.
func (o *DatasetQueryResultsCol) SetRemappedTo(v string) {
	o.RemappedTo = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DatasetQueryResultsCol) SetId(v int64) {
	o.Id = &v
}

// GetVisibilityType returns the VisibilityType field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetVisibilityType() string {
	if o == nil || IsNil(o.VisibilityType) {
		var ret string
		return ret
	}
	return *o.VisibilityType
}

// GetVisibilityTypeOk returns a tuple with the VisibilityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetVisibilityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VisibilityType) {
		return nil, false
	}
	return o.VisibilityType, true
}

// HasVisibilityType returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasVisibilityType() bool {
	if o != nil && !IsNil(o.VisibilityType) {
		return true
	}

	return false
}

// SetVisibilityType gets a reference to the given string and assigns it to the VisibilityType field.
func (o *DatasetQueryResultsCol) SetVisibilityType(v string) {
	o.VisibilityType = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetTarget() DatasetQueryResultsColTarget {
	if o == nil || IsNil(o.Target) {
		var ret DatasetQueryResultsColTarget
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetTargetOk() (*DatasetQueryResultsColTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given DatasetQueryResultsColTarget and assigns it to the Target field.
func (o *DatasetQueryResultsCol) SetTarget(v DatasetQueryResultsColTarget) {
	o.Target = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DatasetQueryResultsCol) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetFingerprint() DatasetQueryResultsColFingerprint {
	if o == nil || IsNil(o.Fingerprint) {
		var ret DatasetQueryResultsColFingerprint
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetFingerprintOk() (*DatasetQueryResultsColFingerprint, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given DatasetQueryResultsColFingerprint and assigns it to the Fingerprint field.
func (o *DatasetQueryResultsCol) SetFingerprint(v DatasetQueryResultsColFingerprint) {
	o.Fingerprint = &v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *DatasetQueryResultsCol) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsCol) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *DatasetQueryResultsCol) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *DatasetQueryResultsCol) SetBaseType(v string) {
	o.BaseType = &v
}

func (o DatasetQueryResultsCol) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetQueryResultsCol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TableId) {
		toSerialize["table_id"] = o.TableId
	}
	if !IsNil(o.SchemaName) {
		toSerialize["schema_name"] = o.SchemaName
	}
	if !IsNil(o.SpecialType) {
		toSerialize["special_type"] = o.SpecialType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.RemappedFrom) {
		toSerialize["remapped_from"] = o.RemappedFrom
	}
	if !IsNil(o.ExtraInfo) {
		toSerialize["extra_info"] = o.ExtraInfo
	}
	if !IsNil(o.FkFieldId) {
		toSerialize["fk_field_id"] = o.FkFieldId
	}
	if !IsNil(o.RemappedTo) {
		toSerialize["remapped_to"] = o.RemappedTo
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.VisibilityType) {
		toSerialize["visibility_type"] = o.VisibilityType
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.BaseType) {
		toSerialize["base_type"] = o.BaseType
	}
	return toSerialize, nil
}

type NullableDatasetQueryResultsCol struct {
	value *DatasetQueryResultsCol
	isSet bool
}

func (v NullableDatasetQueryResultsCol) Get() *DatasetQueryResultsCol {
	return v.value
}

func (v *NullableDatasetQueryResultsCol) Set(val *DatasetQueryResultsCol) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetQueryResultsCol) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetQueryResultsCol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetQueryResultsCol(val *DatasetQueryResultsCol) *NullableDatasetQueryResultsCol {
	return &NullableDatasetQueryResultsCol{value: val, isSet: true}
}

func (v NullableDatasetQueryResultsCol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetQueryResultsCol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
