/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the DatasetQueryOpts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetQueryOpts{}

// DatasetQueryOpts struct for DatasetQueryOpts
type DatasetQueryOpts struct {
	Description *string `json:"description,omitempty"`
	// unknown type
	EntityType interface{} `json:"entity_type,omitempty"`
}

// NewDatasetQueryOpts instantiates a new DatasetQueryOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetQueryOpts() *DatasetQueryOpts {
	this := DatasetQueryOpts{}
	return &this
}

// NewDatasetQueryOptsWithDefaults instantiates a new DatasetQueryOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetQueryOptsWithDefaults() *DatasetQueryOpts {
	this := DatasetQueryOpts{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatasetQueryOpts) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryOpts) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatasetQueryOpts) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatasetQueryOpts) SetDescription(v string) {
	o.Description = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatasetQueryOpts) GetEntityType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatasetQueryOpts) GetEntityTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EntityType) {
		return nil, false
	}
	return &o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *DatasetQueryOpts) HasEntityType() bool {
	if o != nil && IsNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given interface{} and assigns it to the EntityType field.
func (o *DatasetQueryOpts) SetEntityType(v interface{}) {
	o.EntityType = v
}

func (o DatasetQueryOpts) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetQueryOpts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.EntityType != nil {
		toSerialize["entity_type"] = o.EntityType
	}
	return toSerialize, nil
}

type NullableDatasetQueryOpts struct {
	value *DatasetQueryOpts
	isSet bool
}

func (v NullableDatasetQueryOpts) Get() *DatasetQueryOpts {
	return v.value
}

func (v *NullableDatasetQueryOpts) Set(val *DatasetQueryOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetQueryOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetQueryOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetQueryOpts(val *DatasetQueryOpts) *NullableDatasetQueryOpts {
	return &NullableDatasetQueryOpts{value: val, isSet: true}
}

func (v NullableDatasetQueryOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetQueryOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
