/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the DatasetQueryDslPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetQueryDslPage{}

// DatasetQueryDslPage struct for DatasetQueryDslPage
type DatasetQueryDslPage struct {
	Page  *int64 `json:"page,omitempty"`
	Items *int64 `json:"items,omitempty"`
}

// NewDatasetQueryDslPage instantiates a new DatasetQueryDslPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetQueryDslPage() *DatasetQueryDslPage {
	this := DatasetQueryDslPage{}
	return &this
}

// NewDatasetQueryDslPageWithDefaults instantiates a new DatasetQueryDslPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetQueryDslPageWithDefaults() *DatasetQueryDslPage {
	this := DatasetQueryDslPage{}
	return &this
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *DatasetQueryDslPage) GetPage() int64 {
	if o == nil || IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryDslPage) GetPageOk() (*int64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *DatasetQueryDslPage) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *DatasetQueryDslPage) SetPage(v int64) {
	o.Page = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *DatasetQueryDslPage) GetItems() int64 {
	if o == nil || IsNil(o.Items) {
		var ret int64
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryDslPage) GetItemsOk() (*int64, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *DatasetQueryDslPage) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given int64 and assigns it to the Items field.
func (o *DatasetQueryDslPage) SetItems(v int64) {
	o.Items = &v
}

func (o DatasetQueryDslPage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetQueryDslPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableDatasetQueryDslPage struct {
	value *DatasetQueryDslPage
	isSet bool
}

func (v NullableDatasetQueryDslPage) Get() *DatasetQueryDslPage {
	return v.value
}

func (v *NullableDatasetQueryDslPage) Set(val *DatasetQueryDslPage) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetQueryDslPage) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetQueryDslPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetQueryDslPage(val *DatasetQueryDslPage) *NullableDatasetQueryDslPage {
	return &NullableDatasetQueryDslPage{value: val, isSet: true}
}

func (v NullableDatasetQueryDslPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetQueryDslPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
