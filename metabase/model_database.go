/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
	"time"
)

// checks if the Database type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Database{}

// Database struct for Database
type Database struct {
	Id                       int64    `json:"id"`
	Name                     *string  `json:"name,omitempty"`
	Description              *string  `json:"description,omitempty"`
	Features                 []string `json:"features,omitempty"`
	IsFullSync               *bool    `json:"is_full_sync,omitempty"`
	IsSample                 *bool    `json:"is_sample,omitempty"`
	CacheFieldValuesSchedule *string  `json:"cache_field_values_schedule,omitempty"`
	MetadataSyncSchedule     *string  `json:"metadata_sync_schedule,omitempty"`
	// type unknown
	Caveats           *string    `json:"caveats,omitempty"`
	Engine            *string    `json:"engine,omitempty"`
	CreatedAt         *time.Time `json:"created_at,omitempty"`
	UpdatedAt         *time.Time `json:"updated_at,omitempty"`
	NativePermissions *string    `json:"native_permissions,omitempty"`
	// type unknown
	PointsOfInterest *string          `json:"points_of_interest,omitempty"`
	Details          *DatabaseDetails `json:"details,omitempty"`
	Tables           []DatabaseTable  `json:"tables,omitempty"`
}

// NewDatabase instantiates a new Database object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabase(id int64) *Database {
	this := Database{}
	this.Id = id
	return &this
}

// NewDatabaseWithDefaults instantiates a new Database object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseWithDefaults() *Database {
	this := Database{}
	return &this
}

// GetId returns the Id field value
func (o *Database) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Database) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Database) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Database) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Database) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Database) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Database) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Database) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Database) SetDescription(v string) {
	o.Description = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *Database) GetFeatures() []string {
	if o == nil || IsNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *Database) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *Database) SetFeatures(v []string) {
	o.Features = v
}

// GetIsFullSync returns the IsFullSync field value if set, zero value otherwise.
func (o *Database) GetIsFullSync() bool {
	if o == nil || IsNil(o.IsFullSync) {
		var ret bool
		return ret
	}
	return *o.IsFullSync
}

// GetIsFullSyncOk returns a tuple with the IsFullSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetIsFullSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFullSync) {
		return nil, false
	}
	return o.IsFullSync, true
}

// HasIsFullSync returns a boolean if a field has been set.
func (o *Database) HasIsFullSync() bool {
	if o != nil && !IsNil(o.IsFullSync) {
		return true
	}

	return false
}

// SetIsFullSync gets a reference to the given bool and assigns it to the IsFullSync field.
func (o *Database) SetIsFullSync(v bool) {
	o.IsFullSync = &v
}

// GetIsSample returns the IsSample field value if set, zero value otherwise.
func (o *Database) GetIsSample() bool {
	if o == nil || IsNil(o.IsSample) {
		var ret bool
		return ret
	}
	return *o.IsSample
}

// GetIsSampleOk returns a tuple with the IsSample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetIsSampleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSample) {
		return nil, false
	}
	return o.IsSample, true
}

// HasIsSample returns a boolean if a field has been set.
func (o *Database) HasIsSample() bool {
	if o != nil && !IsNil(o.IsSample) {
		return true
	}

	return false
}

// SetIsSample gets a reference to the given bool and assigns it to the IsSample field.
func (o *Database) SetIsSample(v bool) {
	o.IsSample = &v
}

// GetCacheFieldValuesSchedule returns the CacheFieldValuesSchedule field value if set, zero value otherwise.
func (o *Database) GetCacheFieldValuesSchedule() string {
	if o == nil || IsNil(o.CacheFieldValuesSchedule) {
		var ret string
		return ret
	}
	return *o.CacheFieldValuesSchedule
}

// GetCacheFieldValuesScheduleOk returns a tuple with the CacheFieldValuesSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetCacheFieldValuesScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.CacheFieldValuesSchedule) {
		return nil, false
	}
	return o.CacheFieldValuesSchedule, true
}

// HasCacheFieldValuesSchedule returns a boolean if a field has been set.
func (o *Database) HasCacheFieldValuesSchedule() bool {
	if o != nil && !IsNil(o.CacheFieldValuesSchedule) {
		return true
	}

	return false
}

// SetCacheFieldValuesSchedule gets a reference to the given string and assigns it to the CacheFieldValuesSchedule field.
func (o *Database) SetCacheFieldValuesSchedule(v string) {
	o.CacheFieldValuesSchedule = &v
}

// GetMetadataSyncSchedule returns the MetadataSyncSchedule field value if set, zero value otherwise.
func (o *Database) GetMetadataSyncSchedule() string {
	if o == nil || IsNil(o.MetadataSyncSchedule) {
		var ret string
		return ret
	}
	return *o.MetadataSyncSchedule
}

// GetMetadataSyncScheduleOk returns a tuple with the MetadataSyncSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetMetadataSyncScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataSyncSchedule) {
		return nil, false
	}
	return o.MetadataSyncSchedule, true
}

// HasMetadataSyncSchedule returns a boolean if a field has been set.
func (o *Database) HasMetadataSyncSchedule() bool {
	if o != nil && !IsNil(o.MetadataSyncSchedule) {
		return true
	}

	return false
}

// SetMetadataSyncSchedule gets a reference to the given string and assigns it to the MetadataSyncSchedule field.
func (o *Database) SetMetadataSyncSchedule(v string) {
	o.MetadataSyncSchedule = &v
}

// GetCaveats returns the Caveats field value if set, zero value otherwise.
func (o *Database) GetCaveats() string {
	if o == nil || IsNil(o.Caveats) {
		var ret string
		return ret
	}
	return *o.Caveats
}

// GetCaveatsOk returns a tuple with the Caveats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetCaveatsOk() (*string, bool) {
	if o == nil || IsNil(o.Caveats) {
		return nil, false
	}
	return o.Caveats, true
}

// HasCaveats returns a boolean if a field has been set.
func (o *Database) HasCaveats() bool {
	if o != nil && !IsNil(o.Caveats) {
		return true
	}

	return false
}

// SetCaveats gets a reference to the given string and assigns it to the Caveats field.
func (o *Database) SetCaveats(v string) {
	o.Caveats = &v
}

// GetEngine returns the Engine field value if set, zero value otherwise.
func (o *Database) GetEngine() string {
	if o == nil || IsNil(o.Engine) {
		var ret string
		return ret
	}
	return *o.Engine
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetEngineOk() (*string, bool) {
	if o == nil || IsNil(o.Engine) {
		return nil, false
	}
	return o.Engine, true
}

// HasEngine returns a boolean if a field has been set.
func (o *Database) HasEngine() bool {
	if o != nil && !IsNil(o.Engine) {
		return true
	}

	return false
}

// SetEngine gets a reference to the given string and assigns it to the Engine field.
func (o *Database) SetEngine(v string) {
	o.Engine = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Database) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Database) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Database) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Database) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Database) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Database) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetNativePermissions returns the NativePermissions field value if set, zero value otherwise.
func (o *Database) GetNativePermissions() string {
	if o == nil || IsNil(o.NativePermissions) {
		var ret string
		return ret
	}
	return *o.NativePermissions
}

// GetNativePermissionsOk returns a tuple with the NativePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetNativePermissionsOk() (*string, bool) {
	if o == nil || IsNil(o.NativePermissions) {
		return nil, false
	}
	return o.NativePermissions, true
}

// HasNativePermissions returns a boolean if a field has been set.
func (o *Database) HasNativePermissions() bool {
	if o != nil && !IsNil(o.NativePermissions) {
		return true
	}

	return false
}

// SetNativePermissions gets a reference to the given string and assigns it to the NativePermissions field.
func (o *Database) SetNativePermissions(v string) {
	o.NativePermissions = &v
}

// GetPointsOfInterest returns the PointsOfInterest field value if set, zero value otherwise.
func (o *Database) GetPointsOfInterest() string {
	if o == nil || IsNil(o.PointsOfInterest) {
		var ret string
		return ret
	}
	return *o.PointsOfInterest
}

// GetPointsOfInterestOk returns a tuple with the PointsOfInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetPointsOfInterestOk() (*string, bool) {
	if o == nil || IsNil(o.PointsOfInterest) {
		return nil, false
	}
	return o.PointsOfInterest, true
}

// HasPointsOfInterest returns a boolean if a field has been set.
func (o *Database) HasPointsOfInterest() bool {
	if o != nil && !IsNil(o.PointsOfInterest) {
		return true
	}

	return false
}

// SetPointsOfInterest gets a reference to the given string and assigns it to the PointsOfInterest field.
func (o *Database) SetPointsOfInterest(v string) {
	o.PointsOfInterest = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Database) GetDetails() DatabaseDetails {
	if o == nil || IsNil(o.Details) {
		var ret DatabaseDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetDetailsOk() (*DatabaseDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Database) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given DatabaseDetails and assigns it to the Details field.
func (o *Database) SetDetails(v DatabaseDetails) {
	o.Details = &v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *Database) GetTables() []DatabaseTable {
	if o == nil || IsNil(o.Tables) {
		var ret []DatabaseTable
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetTablesOk() ([]DatabaseTable, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *Database) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []DatabaseTable and assigns it to the Tables field.
func (o *Database) SetTables(v []DatabaseTable) {
	o.Tables = v
}

func (o Database) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Database) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.IsFullSync) {
		toSerialize["is_full_sync"] = o.IsFullSync
	}
	if !IsNil(o.IsSample) {
		toSerialize["is_sample"] = o.IsSample
	}
	if !IsNil(o.CacheFieldValuesSchedule) {
		toSerialize["cache_field_values_schedule"] = o.CacheFieldValuesSchedule
	}
	if !IsNil(o.MetadataSyncSchedule) {
		toSerialize["metadata_sync_schedule"] = o.MetadataSyncSchedule
	}
	if !IsNil(o.Caveats) {
		toSerialize["caveats"] = o.Caveats
	}
	if !IsNil(o.Engine) {
		toSerialize["engine"] = o.Engine
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.NativePermissions) {
		toSerialize["native_permissions"] = o.NativePermissions
	}
	if !IsNil(o.PointsOfInterest) {
		toSerialize["points_of_interest"] = o.PointsOfInterest
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	return toSerialize, nil
}

type NullableDatabase struct {
	value *Database
	isSet bool
}

func (v NullableDatabase) Get() *Database {
	return v.value
}

func (v *NullableDatabase) Set(val *Database) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabase(val *Database) *NullableDatabase {
	return &NullableDatabase{value: val, isSet: true}
}

func (v NullableDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
