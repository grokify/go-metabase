/*
Metabase

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metabase

import (
	"encoding/json"
)

// checks if the DatasetQueryResultsColTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasetQueryResultsColTarget{}

// DatasetQueryResultsColTarget struct for DatasetQueryResultsColTarget
type DatasetQueryResultsColTarget struct {
	Id             *int64  `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	DisplayName    *string `json:"display_name,omitempty"`
	TableId        *int64  `json:"table_id,omitempty"`
	Description    *string `json:"description,omitempty"`
	BaseType       *string `json:"base_type,omitempty"`
	SpecialType    *string `json:"special_type,omitempty"`
	VisibilityType *string `json:"visibility_type,omitempty"`
}

// NewDatasetQueryResultsColTarget instantiates a new DatasetQueryResultsColTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasetQueryResultsColTarget() *DatasetQueryResultsColTarget {
	this := DatasetQueryResultsColTarget{}
	return &this
}

// NewDatasetQueryResultsColTargetWithDefaults instantiates a new DatasetQueryResultsColTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasetQueryResultsColTargetWithDefaults() *DatasetQueryResultsColTarget {
	this := DatasetQueryResultsColTarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DatasetQueryResultsColTarget) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatasetQueryResultsColTarget) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DatasetQueryResultsColTarget) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetTableId returns the TableId field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetTableId() int64 {
	if o == nil || IsNil(o.TableId) {
		var ret int64
		return ret
	}
	return *o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetTableIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TableId) {
		return nil, false
	}
	return o.TableId, true
}

// HasTableId returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasTableId() bool {
	if o != nil && !IsNil(o.TableId) {
		return true
	}

	return false
}

// SetTableId gets a reference to the given int64 and assigns it to the TableId field.
func (o *DatasetQueryResultsColTarget) SetTableId(v int64) {
	o.TableId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatasetQueryResultsColTarget) SetDescription(v string) {
	o.Description = &v
}

// GetBaseType returns the BaseType field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetBaseType() string {
	if o == nil || IsNil(o.BaseType) {
		var ret string
		return ret
	}
	return *o.BaseType
}

// GetBaseTypeOk returns a tuple with the BaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetBaseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BaseType) {
		return nil, false
	}
	return o.BaseType, true
}

// HasBaseType returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasBaseType() bool {
	if o != nil && !IsNil(o.BaseType) {
		return true
	}

	return false
}

// SetBaseType gets a reference to the given string and assigns it to the BaseType field.
func (o *DatasetQueryResultsColTarget) SetBaseType(v string) {
	o.BaseType = &v
}

// GetSpecialType returns the SpecialType field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetSpecialType() string {
	if o == nil || IsNil(o.SpecialType) {
		var ret string
		return ret
	}
	return *o.SpecialType
}

// GetSpecialTypeOk returns a tuple with the SpecialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetSpecialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SpecialType) {
		return nil, false
	}
	return o.SpecialType, true
}

// HasSpecialType returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasSpecialType() bool {
	if o != nil && !IsNil(o.SpecialType) {
		return true
	}

	return false
}

// SetSpecialType gets a reference to the given string and assigns it to the SpecialType field.
func (o *DatasetQueryResultsColTarget) SetSpecialType(v string) {
	o.SpecialType = &v
}

// GetVisibilityType returns the VisibilityType field value if set, zero value otherwise.
func (o *DatasetQueryResultsColTarget) GetVisibilityType() string {
	if o == nil || IsNil(o.VisibilityType) {
		var ret string
		return ret
	}
	return *o.VisibilityType
}

// GetVisibilityTypeOk returns a tuple with the VisibilityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasetQueryResultsColTarget) GetVisibilityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VisibilityType) {
		return nil, false
	}
	return o.VisibilityType, true
}

// HasVisibilityType returns a boolean if a field has been set.
func (o *DatasetQueryResultsColTarget) HasVisibilityType() bool {
	if o != nil && !IsNil(o.VisibilityType) {
		return true
	}

	return false
}

// SetVisibilityType gets a reference to the given string and assigns it to the VisibilityType field.
func (o *DatasetQueryResultsColTarget) SetVisibilityType(v string) {
	o.VisibilityType = &v
}

func (o DatasetQueryResultsColTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasetQueryResultsColTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.TableId) {
		toSerialize["table_id"] = o.TableId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.BaseType) {
		toSerialize["base_type"] = o.BaseType
	}
	if !IsNil(o.SpecialType) {
		toSerialize["special_type"] = o.SpecialType
	}
	if !IsNil(o.VisibilityType) {
		toSerialize["visibility_type"] = o.VisibilityType
	}
	return toSerialize, nil
}

type NullableDatasetQueryResultsColTarget struct {
	value *DatasetQueryResultsColTarget
	isSet bool
}

func (v NullableDatasetQueryResultsColTarget) Get() *DatasetQueryResultsColTarget {
	return v.value
}

func (v *NullableDatasetQueryResultsColTarget) Set(val *DatasetQueryResultsColTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasetQueryResultsColTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasetQueryResultsColTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasetQueryResultsColTarget(val *DatasetQueryResultsColTarget) *NullableDatasetQueryResultsColTarget {
	return &NullableDatasetQueryResultsColTarget{value: val, isSet: true}
}

func (v NullableDatasetQueryResultsColTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasetQueryResultsColTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
